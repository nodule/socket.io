{
  "name": "socket-io",
  "description": "Socket.io nodes for ChiÏ‡",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/socket.io.git"
  },
  "dependencies": {
    "socket.io": "1.x.x"
  },
  "nodes": [
    {
      "name": "emit",
      "ns": "socket.io",
      "description": "Creates an io socket server object",
      "ports": {
        "input": {
          "socket": {
            "type": "function",
            "title": "io socket handle",
            "description": "Expects an socket.io socket node.",
            "readonly": true,
            "required": true
          },
          "message": {
            "type": "any",
            "title": "A message to send",
            "required": true
          },
          "who": {
            "type": "object",
            "title": "Who should receive this?",
            "description": "an object describing who should receive this message"
          },
          "volatile": {
            "type": "boolean",
            "title": "Volatitle",
            "default": false,
            "description": "Sometimes certain messages can be dropped. Let's say you have an app that shows realtime tweets for the keyword `bieber`.  If a certain client is not ready to receive messages (because of network slowness or other issues, or because he's connected through long polling and is in the middle of a request-response cycle), if he doesn't receive ALL the tweets related to bieber your application won't suffer."
          }
        },
        "output": {}
      },
      "fn": "output = function() {\n  $.socket.emit($.name, $.data)\n}\n"
    },
    {
      "name": "listen",
      "ns": "socket.io",
      "description": "Creates an io socket server object",
      "dependencies": {
        "npm": {
          "socket.io": "latest"
        }
      },
      "ports": {
        "input": {
          "app": {
            "type": "function",
            "title": "HTTP server handle",
            "description": "Expects a http or express server node object.",
            "readonly": true,
            "required": true
          }
        },
        "output": {
          "io": {
            "type": "object",
            "title": "io socket server object"
          }
        }
      },
      "fn": "output = {\n  io: socket_io.listen($.app)\n}\n"
    },
    {
      "name": "on",
      "ns": "socket.io",
      "description": "Creates an io socket server object",
      "ports": {
        "input": {
          "io": {
            "type": "function",
            "title": "io socket server handle",
            "description": "Expects a io socket server node.",
            "readonly": true,
            "required": true
          }
        },
        "output": {
          "socket": {
            "type": "function",
            "title": "io socket object"
          }
        }
      },
      "fn": "output = [$.io.sockets, 'on', $.event]\n"
    }
  ]
}